// <auto-generated />
using Car_Whisperer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Car_Whisperer.Migrations
{
    [DbContext(typeof(CarWhispererDbContext))]
    [Migration("20231206174234_AddedProductSeed")]
    partial class AddedProductSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Car_Whisperer.Entities.Product", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<float>("ProductPrice")
                        .HasColumnType("REAL");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = 1,
                            ProductId = 1,
                            ProductName = "Whisper Tire Set",
                            ProductPrice = 600f
                        },
                        new
                        {
                            ProductCategoryId = 2,
                            ProductId = 2,
                            ProductName = "Whisper Brake Set",
                            ProductPrice = 280f
                        },
                        new
                        {
                            ProductCategoryId = 3,
                            ProductId = 3,
                            ProductName = "Whisper Car Battery",
                            ProductPrice = 130f
                        },
                        new
                        {
                            ProductCategoryId = 4,
                            ProductId = 4,
                            ProductName = "Whisper Motor Oil - Synthetic",
                            ProductPrice = 25f
                        },
                        new
                        {
                            ProductCategoryId = 5,
                            ProductId = 5,
                            ProductName = "Whisper Wipers",
                            ProductPrice = 7f
                        });
                });

            modelBuilder.Entity("Car_Whisperer.Entities.Tire", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<int>("TireId")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<string>("TireName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<float>("TirePrice")
                        .HasColumnType("REAL");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("Tires");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = 1,
                            TireId = 1,
                            TireName = "Michelin",
                            TirePrice = 180f
                        },
                        new
                        {
                            ProductCategoryId = 2,
                            TireId = 2,
                            TireName = "Goodyear",
                            TirePrice = 189.99f
                        },
                        new
                        {
                            ProductCategoryId = 3,
                            TireId = 3,
                            TireName = "Bridgestone",
                            TirePrice = 163.99f
                        },
                        new
                        {
                            ProductCategoryId = 4,
                            TireId = 4,
                            TireName = "Pirelli",
                            TirePrice = 158.99f
                        },
                        new
                        {
                            ProductCategoryId = 5,
                            TireId = 5,
                            TireName = "Continental",
                            TirePrice = 264.99f
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
